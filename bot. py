import asyncio
import sqlite3
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command

# === –¢–æ–∫–µ–Ω –∏–∑ Railway ===
TOKEN = os.getenv("BOT_TOKEN")

# === –û–∫–ª–∞–¥ –∑–∞ 1 –¥–µ–Ω—å ===
DAILY_SALARY = 500

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect("workdays.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS workdays (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            UNIQUE(user_id, date)
        )
    """)
    conn.commit()
    conn.close()

def add_day(user_id: int):
    conn = sqlite3.connect("workdays.db")
    cur = conn.cursor()
    today = datetime.now().strftime("%Y-%m-%d")
    cur.execute("INSERT OR IGNORE INTO workdays (user_id, date) VALUES (?, ?)", (user_id, today))
    conn.commit()
    conn.close()

def get_stats(user_id: int):
    conn = sqlite3.connect("workdays.db")
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM workdays WHERE user_id = ?", (user_id,))
    days = cur.fetchone()[0]
    conn.close()
    return days, days * DAILY_SALARY

def reset_data(user_id: int):
    conn = sqlite3.connect("workdays.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM workdays WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_month_report(user_id: int):
    conn = sqlite3.connect("workdays.db")
    cur = conn.cursor()
    cur.execute("SELECT date FROM workdays WHERE user_id = ? ORDER BY date", (user_id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        return "üì≠ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —É —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–º–µ—Ç–æ–∫."

    report = "üìÖ –û—Ç—á—ë—Ç –ø–æ —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º:\n"
    for i, (date,) in enumerate(rows, start=1):
        report += f"{i}. {date} ‚úÖ\n"
    report += f"\n–í—Å–µ–≥–æ –¥–Ω–µ–π: {len(rows)}\nüí∞ –û–∫–ª–∞–¥: {len(rows) * DAILY_SALARY}"
    return report

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –Ø –ø—Ä–∏—à—ë–ª –Ω–∞ —Ä–∞–±–æ—Ç—É")],
        [KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üìÖ –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü")],
        [KeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ],
    resize_keyboard=True
)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç *Energy Saving*.\n"
        "–û—Ç–º–µ—á–∞–π –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –∞ —è –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç—É üí∞.",
        reply_markup=main_menu,
        parse_mode="Markdown"
    )

@dp.message(lambda msg: msg.text == "‚úÖ –Ø –ø—Ä–∏—à—ë–ª –Ω–∞ —Ä–∞–±–æ—Ç—É")
async def workday_handler(message: types.Message):
    user_id = message.from_user.id
    add_day(user_id)
    days, salary = get_stats(user_id)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! üìÖ –¢—ã –æ—Ç–º–µ—Ç–∏–ª {days} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\nüí∞ –¢–µ–∫—É—â–∏–π –æ–∫–ª–∞–¥: {salary}")

@dp.message(lambda msg: msg.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: types.Message):
    user_id = message.from_user.id
    days, salary = get_stats(user_id)
    await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {days}\n–û–∫–ª–∞–¥: {salary}")

@dp.message(lambda msg: msg.text == "üìÖ –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü")
async def report_handler(message: types.Message):
    user_id = message.from_user.id
    report = get_month_report(user_id)
    await message.answer(report)

@dp.message(lambda msg: msg.text == "‚ùå –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def reset_handler(message: types.Message):
    user_id = message.from_user.id
    reset_data(user_id)
    await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
